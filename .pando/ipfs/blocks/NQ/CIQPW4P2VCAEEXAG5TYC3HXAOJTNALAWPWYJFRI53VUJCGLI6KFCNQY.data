
­/¥/"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("./fs");
var PATH = {
    ROOT: '.pando',
    CONF: '.pando/conf',
    TMP: '.pando/tmp',
    HEAD: '.pando/head',
    REFS: '.pando/refs'
};
exports.empty = {
    committer: {
        address: '',
        name: '',
        email: ''
    },
    node: { address: '' }
};
exports.initialize = function (configuration) {
    return new Promise(function (resolve, reject) {
        try {
            if (fs.exists(PATH.ROOT)) {
                reject(new Error('A pando repository already exists in the current working directory'));
            }
            fs.mkdir(PATH.ROOT);
            fs.mkdir(PATH.TMP);
            fs.mkdir(PATH.REFS);
            fs.json.write(PATH.HEAD, 'undefined');
            exports.set('global', configuration);
            resolve();
        }
        catch (err) {
            reject(err);
        }
    });
};
exports.get = function (key) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) {
                try {
                    var conf = fs.json.read(PATH.CONF);
                    if (key) {
                        resolve(conf[key]);
                    }
                    else {
                        resolve(conf);
                    }
                }
                catch (err) {
                    reject(err);
                }
            })];
    });
}); };
exports.set = function (key, value) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, new Promise(function (resolve, reject) {
                try {
                    var conf = void 0;
                    if (key === 'global') {
                        conf = value;
                    }
                    else {
                        conf = fs.json.read(PATH.CONF);
                        conf[key] = value;
                    }
                    fs.json.write(PATH.CONF, conf);
                }
                catch (err) {
                    reject(err);
                }
            })];
    });
}); };
// function store(target: any, key: string): any {
//   let value = target[key]
//   let getter = function () {
//     fs.json.write(path.conf, key)
//   }
// }
// 
// export class Configuration {
// 
//   @store public committer: ICommitter
//   @store public node: INode
// 
//   private static instance: Configuration
// 
//   public static load() {
//     if (!Configuration.instance) {
//           Configuration.instance = new Configuration()
//           // ... any one time initialization goes here ...
//     } else {
// 
//   }
//   return Configuration.instance
// }
// 
//   someMethod() { }
// 
// }
// function realName(target, key: string): any {
//     // property value
//     var _val = target[key];
// 
//     // property getter
//     var getter = function () {
//       return "Ragularuban(" + _val + ")";
//     };
// 
//     // property setter
//     var setter = function (newVal) {
//       _val = newVal;
//     };
// 
//     // Create new property with getter and setter
//     Object.defineProperty(target, key, {
//       get: getter,
//       set: setter
//     });
//   }
// 
//   class JSMeetup {
//     //@realName
//     public myName = "Ruban";
//     constructor() {
//     }
//     greet() {
//       return "Hi, I'm " + this.myName;
//     }
//   }
// 
//   const meetup = new JSMeetup();
//   console.log(meetup.greet());
//   meetup.myName = "Ragul";
//   console.log(meetup.greet());
//# sourceMappingURL=conf.js.map¥/