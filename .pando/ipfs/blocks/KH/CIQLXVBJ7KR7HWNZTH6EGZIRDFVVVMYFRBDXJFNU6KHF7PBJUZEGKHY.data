
½2µ2"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var artifactor = require('truffle-contract');
// const aragonOSArtifacts = [
//   'Kernel',
//   'DAOFactory',
//   'ACL'
// ].map((name) => require(`@aragon/os/build/contracts/${name}.json`))
// 
// const pandoArtifacts = [
//   'Pando'
// ].map((name) => require(`../../build/contracts/${name}.json`))
// 
// const artifacts = [...aragonOSArtifacts, ...pandoArtifacts]
var Pando = /** @class */ (function () {
    /**
      * Constructor. Do not use constructor directly. Use Pando.create, Pando.load or Pando.clone instead.
      *
      * @constructor
      */
    function Pando(opts) {
        this.path = opts.path;
        this.committer = opts.committer;
        this.ethereum = opts.ethereum;
    }
    /**
     * Creates a new repository and initializes its configuration tree
     *
     * @param {string} [opts.path] - The path of the repository's working directory
     * @param {ICommitter} [opts.committer] - The default committer of the repository
     * @param {string|Provider} [opts.ethereum] - An instance of a web3 provider or an URL for a Web3 HTTP provider. If not specified, web3 provider will either be browser-injected through Mist/Metamask or set to http://localhost:8545
     * @returns {Pando} An instance of a pando repository
     */
    Pando.create = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            var pando;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        pando = new Pando(opts);
                        return [4 /*yield*/, pando.initialized(opts)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, pando.save()];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, pando];
                }
            });
        });
    };
    /**
     * Loads a local pando repository to create a new pando instance
     *
     * @param {string} [path='.'] - A `path` to a local pando repository
     * @returns {Pando} An instance of a pando repository
     */
    Pando.load = function (path) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Pando.at = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Pando.clone = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Pando.fork = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Pando.prototype.initialized = function (opts) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Pando.prototype.push = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Pando.prototype.merge = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    Pando.prototype.commit = function (message) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/];
            });
        });
    };
    return Pando;
}());
//# sourceMappingURL=index.js.mapµ2