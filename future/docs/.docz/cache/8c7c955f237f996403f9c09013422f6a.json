{"remainingRequest":"/Users/osarrouy/Documents/dapp/@pando/packages/docs/node_modules/babel-loader/lib/index.js?{\"presets\":[[\"/Users/osarrouy/Documents/dapp/@pando/packages/docs/node_modules/babel-preset-docz/dist/index.js\",{\"flow\":false,\"typescript\":true,\"parseProps\":false}]],\"plugins\":[[\"/Users/osarrouy/Documents/dapp/@pando/packages/docs/node_modules/docz-utils/lib/named-asset-import.js\",{\"loaderMap\":{\"svg\":{\"ReactComponent\":\"@svgr/webpack?-prettier,-svgo![path]\"}}}],\"/Users/osarrouy/Documents/dapp/@pando/packages/docs/node_modules/react-hot-loader/babel.js\"],\"babelrc\":false,\"cacheDirectory\":true,\"cacheCompression\":false,\"compact\":false}!/Users/osarrouy/Documents/dapp/@pando/packages/docs/src/architecture/2 - organisms.mdx","dependencies":[{"path":"/Users/osarrouy/Documents/dapp/@pando/packages/docs/src/architecture/2 - organisms.mdx","mtime":1542732468084},{"path":"/Users/osarrouy/Documents/dapp/@pando/packages/docs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/osarrouy/Documents/dapp/@pando/packages/docs/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["var _jsxFileName = \"/Users/osarrouy/Documents/dapp/@pando/packages/docs/src/architecture/2 - organisms.mdx\";\n\n(function () {\n  var enterModule = require('react-hot-loader').enterModule;\n\n  enterModule && enterModule(module);\n})();\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { MDXTag } from '@mdx-js/tag';\n\nvar _default = function _default(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return React.createElement(MDXTag, {\n    name: \"wrapper\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"h1\",\n    components: components,\n    props: {\n      \"id\": \"organisms\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 6\n    },\n    __self: this\n  }, \"Organisms\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 7\n    },\n    __self: this\n  }, \"Organisms are pando-based content DAOs - software, books, articles, songs, etc. -  living on the blockchain as individuals of their own. You can think about these organisms as a pando equivalent of git remote repositories.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8\n    },\n    __self: this\n  }, \"Pando rely on the aragonOS framework: each pando organism is an aragon-DAO of its own and can immediately access the whole Aragon ecosystem of applications. These organisms come with a couple of pando-specific contracts, though.\"), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"contracts\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, \"Contracts\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Pando's organisms rely on three specific smart-contracts: a \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"PandoGenesis\"), \" contract, a \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"PandoLineage\"), \" contract and a \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"PandoAPI\"), \" contract. All of these contract rely on a shared \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Pando\"), \" library defining pando's data structures and helpers to handle these datastructures.\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components,\n    props: {\n      \"id\": \"pandosol-library\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Pando.sol library\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, \"This library defines shared data structures and a couple of helpers to handle them. The main data structures are the following.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Individuations are pando's equivalent of git's commits. However, individuations \", React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"are not\"), \" commits. Why ? Because commits reflect both the local state and the shared / public state a of repository. When one commit changes they made to a local repository they can easily synchronize it through the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"git push\"), \" command. In pando, every individuation needs to be approved by an underlying DAO. This means that any individuation can be rejected and that there is no immediate identity between the local state and the share / public state of a repository.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Lineages refers to the emission of non-transferrable token acknowledging one's belonging to the lineage tree of a repository. Lineage tokens can thus be granted to contributors for the individuation they submit, but also to dependencies, inspirations, etc.\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components,\n    props: {\n      \"id\": \"pandogenesis\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"PandoGenesis\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"The \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 16\n    },\n    __self: this\n  }, \"PandoGenesis\"), \" contract handles the individuations - i.e. commits - of a repository. It keeps tracks of these individuations, maps them through their unique Individuation ID, and enforce fast-forward consistency.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, \"The master branch version of this contract does not enforce fast-forward consistency yet. ****Everything is in place though and on-chain fast-forward enforcement has already been tested on another branch. This feature will be merged in master branch soon.\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components,\n    props: {\n      \"id\": \"pandolineage\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, \"PandoLineage\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"The PandoLineage contract handles the issuing of \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, \"Native Lineage Tokens\"), \" to acknowledge the belongings of contributors and dependencies to a repository's lineage tree.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Native Lineage Tokens are neither transferrable or purchasable. The only way to gain Native Lineage Tokens is to actually contribute to a repository either as a direct contributor or as a dependency repository.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"For now the \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"PandoLineage\"), \" contract is a dummy copy / paste of aragon's \", React.createElement(MDXTag, {\n    name: \"inlineCode\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"TokenController\"), \" contract whose unneeded functions - \", React.createElement(MDXTag, {\n    name: \"em\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"i.e.\"), \" almost everything - have been swiped away.\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components,\n    props: {\n      \"id\": \"pandoapi\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"PandoAPI\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"Users and foreign aragonOS apps \", React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"are not supposed to directly interact\"), \" with the PandoGenesis and PandoLineage contracts.\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"The role declared in these contracts should be \", React.createElement(MDXTag, {\n    name: \"strong\",\n    components: components,\n    parentName: \"p\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"granted to the PandoAPI contract only\"), \".\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  }, \"The PandoAPI contracts acts as an interface for all external interactions with the repository - and thus with the Genesis and Lineage contracts. Its purpose is to enforce the consistency of the pando protocol state-machine.\"), React.createElement(MDXTag, {\n    name: \"ol\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Users do not directly individuate a repository. They create Requests For Individuation which must be sorted - accepted or reject - by the DAO.\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, \"Requests For Individuation can come bundled with Requests For Lineage. These Requests For Lineage can origin directly from the user to ask for a reward in return for their contribution, or be automatically filled by a package manager if the Request For Individuation introduce new pando hosted / pando addressable dependencies.\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, \"These Requests For Lineage must also be individually sorted - accepted or rejected - by the DAO. The difference is that accepted Requests For Lineages must also be valuated by the DAO:  which amount of Native Lineage Token is going to be issued for this lineage's destination in case the related Request For Instance is eventually merged.\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  }, \"The pando protocol state machine makes sure the relationships between all of these requests are consistent: if a Request For Lineage is rejected by the DAO, its related Request For Individuation is automatically cancelled ; if a Request For Individuation is rejected by the DAO, its related Requests For Lineage are automatically cancelled ; a Request For Individuation can't be merged before all its Requests For Lineage are accepted; if a Request For Individuation is merged, its related Requests For Lineage are automatically issued; etc.\")), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"The PandoAPI contract makes no assumption about the governance model enforced by the DAO. Its goal is only to make sure that the core logic of the pando protocol is enforced - and cannot be circumvented. It\\u2019s up to the community to write governance kit - mostly: enhanced voting apps - on top this API contract. Governance thus work as an additional layer on top of the PandoAPI.\"), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"governance-kits\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Governance kits\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Governance kits are voting apps built on top of the PandoAPI. These kits must implement the PandoKit abstract contract to comply with a minimum interface - and thus provide a minimum degree of interoperability between governance kits for the CLI. The second milestone release of pando comes with two built-in governance kits.\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components,\n    props: {\n      \"id\": \"dictatorkit\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35\n    },\n    __self: this\n  }, \"DictatorKit\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Enforce a maintainer-based governance \\xE0-la GitHub.\"), React.createElement(MDXTag, {\n    name: \"h3\",\n    components: components,\n    props: {\n      \"id\": \"votingkit\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37\n    },\n    __self: this\n  }, \"VotingKit\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, \"Enforce a NativeLineageToken-backed democratic governance to sort and valuate requests.\"), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"benefits\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Benefits\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }, \"This architecture makes the whole pando contract ecosystem as clear as possible:\"), React.createElement(MDXTag, {\n    name: \"ol\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"The PandoAPI contract can be upgraded - e.g. because a a security breach - without no intervention of governance kits developers. We just have to be careful not to break the API. This can be enforced by a semantic versionning system.\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Whenever people want to upgrade / modify their governance kit they are sure they won\\u2019t mess up with the actual pando contracts storage - and thus loose their history.\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"All governance kits need to go through the API to update the state of the repository. This way, we can make sure that, how badly coded they are, they can\\u2019t mess with the underlying PandoAPI, Genesis or Lineage state - otherwise the API contract will revert. This means: people can develop as messy governance kit they want but they can\\u2019t mess up with the actual repo thanks to the API checking everything is done right when it\\u2019s called.\"), React.createElement(MDXTag, {\n    name: \"li\",\n    components: components,\n    parentName: \"ol\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"All the governance logic / parameters are handled by the governance kits which means: a. People can implement any governance scheme they want - QR, holographic consensus, etc. - without requiring us to think of all the hook they could need in pando to do so. b. It makes it really easy to turn any repo into a human readable license trough radspec as I had demoed on a dummy examples here: \", React.createElement(MDXTag, {\n    name: \"a\",\n    components: components,\n    parentName: \"li\",\n    props: {\n      \"href\": \"https://asciinema.org/a/yM56wVS4Je2bkbzU6Vq57brpP\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"https://asciinema.org/a/yM56wVS4Je2bkbzU6Vq57brpP\"), \". c. All the end-users interactions with a repository governance go through a governance kit contract - and through it, through an PandoAPI contract - which makes it really easy to build aragon-core frontend for these governance kits with no need to circumvent the sandboxing restriction :\", \")\")), React.createElement(MDXTag, {\n    name: \"h2\",\n    components: components,\n    props: {\n      \"id\": \"goals\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Goals\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"We spent a lot of time designing what we think is the best architecture for pando repositories. This means we kind of went out of time to polish its actual implementations :\", \")\", \" All contracts are tested but more security checks needs to be performed - a lot. A couple of features are still missing - fast-foward on-chain checking, kit parameters update, radspec documentation of public functions, etc. This is gonna be polished as soon as I come back from my wedding :\", \")\"), React.createElement(MDXTag, {\n    name: \"p\",\n    components: components,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"The next steps will be: 1. to update and optimize the CLI tool to reflect this architectural changes 2. come with a front-end app for the dictator and voting kit - which should be pretty straight forward. :\", \")\"));\n};\n\nexport default _default;\n;\n\n(function () {\n  var reactHotLoader = require('react-hot-loader').default;\n\n  var leaveModule = require('react-hot-loader').leaveModule;\n\n  if (!reactHotLoader) {\n    return;\n  }\n\n  reactHotLoader.register(_default, \"default\", \"/Users/osarrouy/Documents/dapp/@pando/packages/docs/src/architecture/2 - organisms.mdx\");\n  leaveModule(module);\n})();\n\n;",{"version":3,"sources":["/Users/osarrouy/Documents/dapp/@pando/packages/docs/src/architecture/2 - organisms.mdx"],"names":["React","MDXTag","components","props"],"mappings":"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","sourcesContent":["\n  import React from 'react'\n  import { MDXTag } from '@mdx-js/tag'\n  \n\nexport default ({components, ...props}) => <MDXTag name=\"wrapper\"  components={components}><MDXTag name=\"h1\" components={components} props={{\"id\":\"organisms\"}}>{`Organisms`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Organisms are pando-based content DAOs - software, books, articles, songs, etc. -  living on the blockchain as individuals of their own. You can think about these organisms as a pando equivalent of git remote repositories.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Pando rely on the aragonOS framework: each pando organism is an aragon-DAO of its own and can immediately access the whole Aragon ecosystem of applications. These organisms come with a couple of pando-specific contracts, though.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"contracts\"}}>{`Contracts`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Pando's organisms rely on three specific smart-contracts: a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`PandoGenesis`}</MDXTag>{` contract, a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`PandoLineage`}</MDXTag>{` contract and a `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`PandoAPI`}</MDXTag>{` contract. All of these contract rely on a shared `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Pando`}</MDXTag>{` library defining pando's data structures and helpers to handle these datastructures.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"pandosol-library\"}}>{`Pando.sol library`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This library defines shared data structures and a couple of helpers to handle them. The main data structures are the following.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Individuations are pando's equivalent of git's commits. However, individuations `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`are not`}</MDXTag>{` commits. Why ? Because commits reflect both the local state and the shared / public state a of repository. When one commit changes they made to a local repository they can easily synchronize it through the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`git push`}</MDXTag>{` command. In pando, every individuation needs to be approved by an underlying DAO. This means that any individuation can be rejected and that there is no immediate identity between the local state and the share / public state of a repository.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Lineages refers to the emission of non-transferrable token acknowledging one's belonging to the lineage tree of a repository. Lineage tokens can thus be granted to contributors for the individuation they submit, but also to dependencies, inspirations, etc.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"pandogenesis\"}}>{`PandoGenesis`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`PandoGenesis`}</MDXTag>{` contract handles the individuations - i.e. commits - of a repository. It keeps tracks of these individuations, maps them through their unique Individuation ID, and enforce fast-forward consistency.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The master branch version of this contract does not enforce fast-forward consistency yet. ****Everything is in place though and on-chain fast-forward enforcement has already been tested on another branch. This feature will be merged in master branch soon.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"pandolineage\"}}>{`PandoLineage`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The PandoLineage contract handles the issuing of `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`Native Lineage Tokens`}</MDXTag>{` to acknowledge the belongings of contributors and dependencies to a repository's lineage tree.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Native Lineage Tokens are neither transferrable or purchasable. The only way to gain Native Lineage Tokens is to actually contribute to a repository either as a direct contributor or as a dependency repository.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`For now the `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`PandoLineage`}</MDXTag>{` contract is a dummy copy / paste of aragon's `}<MDXTag name=\"inlineCode\" components={components} parentName=\"p\">{`TokenController`}</MDXTag>{` contract whose unneeded functions - `}<MDXTag name=\"em\" components={components} parentName=\"p\">{`i.e.`}</MDXTag>{` almost everything - have been swiped away.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"pandoapi\"}}>{`PandoAPI`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Users and foreign aragonOS apps `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`are not supposed to directly interact`}</MDXTag>{` with the PandoGenesis and PandoLineage contracts.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The role declared in these contracts should be `}<MDXTag name=\"strong\" components={components} parentName=\"p\">{`granted to the PandoAPI contract only`}</MDXTag>{`.`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The PandoAPI contracts acts as an interface for all external interactions with the repository - and thus with the Genesis and Lineage contracts. Its purpose is to enforce the consistency of the pando protocol state-machine.`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Users do not directly individuate a repository. They create Requests For Individuation which must be sorted - accepted or reject - by the DAO.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Requests For Individuation can come bundled with Requests For Lineage. These Requests For Lineage can origin directly from the user to ask for a reward in return for their contribution, or be automatically filled by a package manager if the Request For Individuation introduce new pando hosted / pando addressable dependencies.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`These Requests For Lineage must also be individually sorted - accepted or rejected - by the DAO. The difference is that accepted Requests For Lineages must also be valuated by the DAO:  which amount of Native Lineage Token is going to be issued for this lineage's destination in case the related Request For Instance is eventually merged.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`The pando protocol state machine makes sure the relationships between all of these requests are consistent: if a Request For Lineage is rejected by the DAO, its related Request For Individuation is automatically cancelled ; if a Request For Individuation is rejected by the DAO, its related Requests For Lineage are automatically cancelled ; a Request For Individuation can't be merged before all its Requests For Lineage are accepted; if a Request For Individuation is merged, its related Requests For Lineage are automatically issued; etc.`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The PandoAPI contract makes no assumption about the governance model enforced by the DAO. Its goal is only to make sure that the core logic of the pando protocol is enforced - and cannot be circumvented. It’s up to the community to write governance kit - mostly: enhanced voting apps - on top this API contract. Governance thus work as an additional layer on top of the PandoAPI.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"governance-kits\"}}>{`Governance kits`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Governance kits are voting apps built on top of the PandoAPI. These kits must implement the PandoKit abstract contract to comply with a minimum interface - and thus provide a minimum degree of interoperability between governance kits for the CLI. The second milestone release of pando comes with two built-in governance kits.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"dictatorkit\"}}>{`DictatorKit`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Enforce a maintainer-based governance à-la GitHub.`}</MDXTag>\n<MDXTag name=\"h3\" components={components} props={{\"id\":\"votingkit\"}}>{`VotingKit`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`Enforce a NativeLineageToken-backed democratic governance to sort and valuate requests.`}</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"benefits\"}}>{`Benefits`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`This architecture makes the whole pando contract ecosystem as clear as possible:`}</MDXTag>\n<MDXTag name=\"ol\" components={components}>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`The PandoAPI contract can be upgraded - e.g. because a a security breach - without no intervention of governance kits developers. We just have to be careful not to break the API. This can be enforced by a semantic versionning system.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`Whenever people want to upgrade / modify their governance kit they are sure they won’t mess up with the actual pando contracts storage - and thus loose their history.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`All governance kits need to go through the API to update the state of the repository. This way, we can make sure that, how badly coded they are, they can’t mess with the underlying PandoAPI, Genesis or Lineage state - otherwise the API contract will revert. This means: people can develop as messy governance kit they want but they can’t mess up with the actual repo thanks to the API checking everything is done right when it’s called.`}</MDXTag>\n<MDXTag name=\"li\" components={components} parentName=\"ol\">{`All the governance logic / parameters are handled by the governance kits which means: a. People can implement any governance scheme they want - QR, holographic consensus, etc. - without requiring us to think of all the hook they could need in pando to do so. b. It makes it really easy to turn any repo into a human readable license trough radspec as I had demoed on a dummy examples here: `}<MDXTag name=\"a\" components={components} parentName=\"li\" props={{\"href\":\"https://asciinema.org/a/yM56wVS4Je2bkbzU6Vq57brpP\"}}>{`https://asciinema.org/a/yM56wVS4Je2bkbzU6Vq57brpP`}</MDXTag>{`. c. All the end-users interactions with a repository governance go through a governance kit contract - and through it, through an PandoAPI contract - which makes it really easy to build aragon-core frontend for these governance kits with no need to circumvent the sandboxing restriction :`}{`)`}</MDXTag>\n</MDXTag>\n<MDXTag name=\"h2\" components={components} props={{\"id\":\"goals\"}}>{`Goals`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`We spent a lot of time designing what we think is the best architecture for pando repositories. This means we kind of went out of time to polish its actual implementations :`}{`)`}{` All contracts are tested but more security checks needs to be performed - a lot. A couple of features are still missing - fast-foward on-chain checking, kit parameters update, radspec documentation of public functions, etc. This is gonna be polished as soon as I come back from my wedding :`}{`)`}</MDXTag>\n<MDXTag name=\"p\" components={components}>{`The next steps will be: 1. to update and optimize the CLI tool to reflect this architectural changes 2. come with a front-end app for the dictator and voting kit - which should be pretty straight forward. :`}{`)`}</MDXTag></MDXTag>\n  "]}]}