var contract = require('truffle-contract')
var data = require('@aragon/os/build/contracts/Kernel.json')
var Kernel = contract(data)

// var Kernel = artifacts.require('@aragon/os/build/contracts/Kernel.json')

// @aragon/os/build/contracts/Kernel.json'

module.exports = (deployer, network, accounts) => {
  Kernel.setProvider(web3.currentProvider)
  Kernel.defaults({ from: accounts[0] })

  console.log('network : ' + network)

  console.log('on va deploy')

  deployer.deploy(Kernel)

  // const kernelBase = await this.repository.pando.contracts.kernel.new()
  // const aclBase = await this.repository.pando.contracts.acl.new()
  // const factory = await this.repository.pando.contracts.daoFactory.new(
  //   kernelBase.address,
  //   aclBase.address,
  //   '0x00'
  // )
  // const appProxyFactory = await this.repository.pando.contracts.appProxyFactory.new()
  //
  // // Deploy aragonOS-based DAO
  // const receipt = await factory.newDAO(this.repository.config.author.account)
  // const kernelAddress = receipt.logs.filter(l => l.event === 'DeployDAO')[0]
  //   .args.dao
  // const kernel = await this.repository.pando.contracts.kernel.at(
  //   kernelAddress
  // )
  // const acl = await this.repository.pando.contracts.acl.at(await kernel.acl())
  // // Grant current author APP_MANAGER_ROLE over the DAO
  // const APP_MANAGER_ROLE = await kernel.APP_MANAGER_ROLE()
  // const receipt2 = await acl.createPermission(
  //   this.repository.config.author.account,
  //   kernel.address,
  //   APP_MANAGER_ROLE,
  //   this.repository.config.author.account
  // )
  // // // Deploy tree app
  // const APP_BASE_NAMESPACE = await kernel.APP_BASES_NAMESPACE()
  // const APP_NAMESPACE = await kernel.APP_ADDR_NAMESPACE()
  //
  // let tree = await this.repository.pando.contracts.tree.new()
  //
  // // const receipt3 = await kernel.newAppInstance(
  // //   Remote.TREE_BASE_APP_ID,
  // //   tree.address
  // // )
  //
  // // await kernel.setApp(
  // //   APP_BASE_NAMESPACE,
  // //   Remote.TREE_BASE_APP_ID,
  // //   tree.address
  // // )
  //
  // await kernel.setApp(
  //   Remote.APP_BASE_NAMESPACE,
  //   Remote.TREE_BASE_APP_ID,
  //   tree.address
  // )
  //
  // const initializationPayload = tree.contract.initialize.getData()
  //
  // // const appProxy = await this.repository.pando.contracts.appProxyUpgradeable.new(
  // //   kernel.address,
  // //   Remote.TREE_BASE_APP_ID
  // // )
  //
  // const appProxy = await this.repository.pando.contracts.appProxyUpgradeable.new(
  //   kernel.address,
  //   Remote.TREE_BASE_APP_ID,
  //   initializationPayload,
  //   { gas: 6e6 }
  // )
  //
  // let address = appProxy.address
  //
  // await kernel.setApp(
  //   APP_NAMESPACE,
  //   Remote.TREE_BASE_APP_ID,
  //   appProxy.address
  // )
  //
  // // const appProxy = await appProxyFactory.newAppProxy(
  // //   kernel.address,
  // //   Remote.TREE_BASE_APP_ID,
  // //   initializationPayload
  // // )
  // //
  // // const address = appProxy.logs.filter(l => l.event === 'NewAppProxy')[0].args
  // //   .proxy
  //
  // tree = await this.repository.pando.contracts.tree.at(address)
  //
  // // await kernel.setApp(
  // //   Remote.APP_BASE_NAMESPACE,
  // //   Remote.TREE_BASE_APP_ID,
  // //   appProxy.address
  // // )
  //
  // // // Create PUSH role
  // const PUSH = await tree.PUSH()
  //
  // const receipt4 = await acl.createPermission(
  //   this.repository.config.author.account,
  //   tree.address,
  //   PUSH,
  //   this.repository.config.author.account
  // )
  // // // Save remote's address
  // this.saveAddress(name, kernel.address)
  // // // Create remote object
  // const remote = new Remote(this.repository, kernel, acl, tree, name)
  // // // Create remote master branch
  // const master = await remote.branches.create('master')
  //
  // return remote
  //
}
