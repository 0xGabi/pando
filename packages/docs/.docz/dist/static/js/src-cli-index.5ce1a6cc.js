(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"./src/cli/index.mdx":function(e,n,a){"use strict";a.r(n);var t=a("./node_modules/react/index.js"),o=a.n(t),m=a("./node_modules/@mdx-js/tag/dist/index.js");function i(e,n){if(null==e)return{};var a,t,o=function(e,n){if(null==e)return{};var a,t,o={},m=Object.keys(e);for(t=0;t<m.length;t++)a=m[t],n.indexOf(a)>=0||(o[a]=e[a]);return o}(e,n);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(e);for(t=0;t<m.length;t++)a=m[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}n.default=function(e){var n=e.components;i(e,["components"]);return o.a.createElement(m.MDXTag,{name:"wrapper",components:n},o.a.createElement(m.MDXTag,{name:"h1",components:n,props:{id:"cli"}},"CLI"),o.a.createElement(m.MDXTag,{name:"h2",components:n,props:{id:"modification-tracking"}},"Modification tracking"),o.a.createElement(m.MDXTag,{name:"p",components:n},"A file in pando can have three different and disjoint statuses: ",o.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"p"},"tracked"),", ",o.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"p"},"untracked")," or ",o.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"p"},"ignored"),"."),o.a.createElement(m.MDXTag,{name:"ul",components:n},o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"A ",o.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"li"},"tracked file")," is a file whose modifications pando will take into account and automatically consider for snapshots."),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"An ",o.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"li"},"untracked file")," is a file whose modifications pando will ",o.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"li"},"not")," take into account and automatically consider for snapshots."),o.a.createElement(m.MDXTag,{name:"li",components:n,parentName:"ul"},"An ",o.a.createElement(m.MDXTag,{name:"em",components:n,parentName:"li"},"ignored")," file is a file that is completely ignored by pando.")),o.a.createElement(m.MDXTag,{name:"p",components:n},"An example output of the ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"gl status")," command ","(",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"foo.py")," and ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"bar.py")," are tracked files with modifications, ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},".gitignore")," is an unmodified tracked file, ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"baz.py")," is an untracked file and ",o.a.createElement(m.MDXTag,{name:"inlineCode",components:n,parentName:"p"},"foo.pyc")," is an ignored file",")",":"),o.a.createElement(m.MDXTag,{name:"pre",components:n},o.a.createElement(m.MDXTag,{name:"code",components:n,parentName:"pre",props:{className:"language-text",metastring:""}},"$ ls\nbar.ts  baz.ts  foo.ts  .gitignore\n$ pando status\nbranch: master\n\ntracked files with modifications:\n  \u279c these will be automatically considered for commit\n  \u279c use gl untrack <f> if you don't want to track changes to file f\n  \u279c if file f was committed before, use gl checkout <f> to discard local changes\n\n    foo.py\n    bar.py\n\nUntracked files:\n  \u279c these won't be considered for commit)\n  \u279c use gl track <f> if you want to track changes to file f\n")))}}}]);